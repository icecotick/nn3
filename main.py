import discord
from discord.ext import commands
from discord.ext.commands import CommandOnCooldown
from discord import Embed, Colour
import random
import os
import asyncpg
import asyncio
import requests
import time
from threading import Thread
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("DISCORD_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

ROLE_NAME = "–ü–∞—Ç—Ä–∏–æ—Ç"
ADMIN_ROLES = ["—Å–æ–∑–¥–∞—Ç–µ–ª—å", "–≥–ª–∞–≤–Ω—ã–π –º–æ–¥–µ—Ä"]
CUSTOM_ROLE_PRICE = 2000
CRIT_CHANCE = 10
SUCCESS_CHANCE = 40
CLAN_CREATION_PRICE = 5000
MUTE_ROLE_NAME = "Muted"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DISCORD_TOKEN")
    exit(1)

if not DATABASE_URL:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DATABASE_URL")
    exit(1)

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
async def delete_after_delay(message, delay=60):
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except:
        pass
      # –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def create_db_pool():
    try:
        pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)
        async with pool.acquire() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    balance INTEGER DEFAULT 0,
                    profile_description TEXT
                )
            """)
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS custom_roles (
                    user_id BIGINT PRIMARY KEY,
                    role_id BIGINT,
                    role_name TEXT,
                    role_color TEXT
                )
            """)
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS clans (
                    name TEXT PRIMARY KEY,
                    owner_id BIGINT,
                    balance INTEGER DEFAULT 0
                )
            """)
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS user_clans (
                    user_id BIGINT PRIMARY KEY,
                    clan_name TEXT
                )
            """)
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS levels (
                    user_id BIGINT PRIMARY KEY,
                    xp INTEGER DEFAULT 0,
                    level INTEGER DEFAULT 1
                )
            """)
        return pool
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        exit(1)

async def get_balance(user_id: int):
    async with bot.db.acquire() as conn:
        result = await conn.fetchrow("SELECT balance FROM users WHERE user_id = $1", user_id)
        return result["balance"] if result else 0

async def update_balance(user_id: int, amount: int):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, balance) VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE SET balance = users.balance + $2
        """, user_id, amount)

async def get_custom_role(user_id: int):
    async with bot.db.acquire() as conn:
        return await conn.fetchrow("SELECT * FROM custom_roles WHERE user_id = $1", user_id)

async def create_custom_role(user_id: int, role_id: int, role_name: str, role_color: str):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO custom_roles (user_id, role_id, role_name, role_color)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id) DO UPDATE SET
            role_id = $2, role_name = $3, role_color = $4
        """, user_id, role_id, role_name, role_color)

async def get_user_clan(user_id: int):
    async with bot.db.acquire() as conn:
        return await conn.fetchval("SELECT clan_name FROM user_clans WHERE user_id = $1", user_id)

async def add_user_to_clan(user_id: int, clan_name: str):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO user_clans (user_id, clan_name) VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE SET clan_name = $2
        """, user_id, clan_name)

async def get_profile_description(user_id: int):
    async with bot.db.acquire() as conn:
        result = await conn.fetchrow("SELECT profile_description FROM users WHERE user_id = $1", user_id)
        return result["profile_description"] if result and result["profile_description"] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

async def update_profile_description(user_id: int, description: str):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, profile_description) VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE SET profile_description = $2
        """, user_id, description)

async def get_level_data(user_id: int):
    async with bot.db.acquire() as conn:
        result = await conn.fetchrow("SELECT xp, level FROM levels WHERE user_id = $1", user_id)
        return {"xp": result["xp"], "level": result["level"]} if result else {"xp": 0, "level": 1}

async def update_level(user_id: int, xp: int, level: int):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO levels (user_id, xp, level) VALUES ($1, $2, $3)
            ON CONFLICT (user_id) DO UPDATE SET xp = $2, level = $3
        """, user_id, xp, level)
      class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def is_admin(self, member):
        return any(role.name.lower() in [r.lower() for r in ADMIN_ROLES] for role in member.roles)

    @commands.command(name="—Å–ª–∞–≤–∞–Ω–Ω")
    @commands.cooldown(1, 7200, commands.BucketType.user)
    async def slav_party(self, ctx):
        user = ctx.author
        role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

        if not role:
            await ctx.send('‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
            return

        if role in user.roles:
            await ctx.send(f'üü• {user.mention}, —Ç—ã —É–∂–µ –ü–∞—Ç—Ä–∏–æ—Ç!')
            return

        roll = random.randint(1, 100)
        balance = await get_balance(user.id)

        if roll <= CRIT_CHANCE:
            await user.add_roles(role)
            await update_balance(user.id, 1000)
            msg = await ctx.send(f'üí• **–ö–†–ò–¢!** {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 1000 —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')
            await delete_after_delay(msg, 60)

        elif roll <= SUCCESS_CHANCE:
            await user.add_roles(role)
            await update_balance(user.id, 100)
            msg = await ctx.send(f'üü• {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 100 —Ä–µ–π—Ç–∏–Ω–≥–∞! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')
            await delete_after_delay(msg, 60)

        else:
            penalty = min(10, balance)
            await update_balance(user.id, -penalty)
            msg = await ctx.send(f'üïä {user.mention}, -{penalty} —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')
            await delete_after_delay(msg, 60)

    @commands.command(name="—Ñ–∞—Ä–º")
    @commands.cooldown(1, 1200, commands.BucketType.user)
    async def farm(self, ctx):
        user = ctx.author
        role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

        if not role or role not in user.roles:
            await ctx.send("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤.")
            return

        reward = random.randint(5, 15)
        await update_balance(user.id, reward)
        msg = await ctx.send(f"üåæ {user.mention}, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {reward} —Å–æ—Ü. –∫—Ä–µ–¥–∏—Ç–æ–≤! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})")
        await delete_after_delay(msg, 60)

    @commands.command(name="–±–∞–ª–∞–Ω—Å")
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def balance(self, ctx):
        bal = await get_balance(ctx.author.id)
        await ctx.send(f'üí∞ {ctx.author.mention}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {bal}')

    @commands.command(name="–ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
    async def transfer(self, ctx, member: discord.Member, amount: int):
        if amount <= 0:
            await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        if member == ctx.author:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return

        sender_balance = await get_balance(ctx.author.id)
        if sender_balance < amount:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return

        await update_balance(ctx.author.id, -amount)
        await update_balance(member.id, amount)
        msg = await ctx.send(f'‚úÖ {ctx.author.mention} –ø–µ—Ä–µ–≤–µ–ª {amount} —Ä–µ–π—Ç–∏–Ω–≥–∞ {member.mention}!')
        await delete_after_delay(msg, 60)

    @commands.command(name="—Ç–æ–ø")
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def top(self, ctx):
        async with bot.db.acquire() as conn:
            top_users = await conn.fetch("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10")

        if not top_users:
            await ctx.send("üòî –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
            return

        leaderboard = []
        for i, record in enumerate(top_users, start=1):
            try:
                user = await bot.fetch_user(record['user_id'])
                leaderboard.append(f"{i}. {user.name} ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            except:
                leaderboard.append(f"{i}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")

        await ctx.send("üèÜ **–¢–æ–ø 10 –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤:**\n" + "\n".join(leaderboard))

    @commands.command(name="–¥–æ–ø–∫—Ä–µ–¥–∏—Ç")
    async def add_credits(self, ctx, member: discord.Member, amount: int):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if amount <= 0:
            await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        
        await update_balance(member.id, amount)
        new_balance = await get_balance(member.id)
        msg = await ctx.send(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ctx.author.mention} –¥–æ–±–∞–≤–∏–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        await delete_after_delay(msg, 60)

    @commands.command(name="–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç")
    async def remove_credits(self, ctx, member: discord.Member, amount: int):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if amount <= 0:
            await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        
        current_balance = await get_balance(member.id)
        if current_balance < amount:
            await ctx.send(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤, –Ω–µ–ª—å–∑—è —Å–Ω—è—Ç—å {amount}!")
            return
        
        await update_balance(member.id, -amount)
        new_balance = await get_balance(member.id)
        msg = await ctx.send(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ctx.author.mention} —Å–Ω—è–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        await delete_after_delay(msg, 60)

    @commands.command(name="–º–∞–≥–∞–∑–∏–Ω")
    async def shop(self, ctx):
        shop_text = f"""
üõç **–ú–∞–≥–∞–∑–∏–Ω —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞:**

üé® `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ù–∞–∑–≤–∞–Ω–∏–µ" #–¶–≤–µ—Ç` - –ö—É–ø–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å ({CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤)
–ü—Ä–∏–º–µ—Ä: `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ë–æ–≥–∞—á" #ff0000`

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(ctx.author.id)} –∫—Ä–µ–¥–∏—Ç–æ–≤
"""
        await ctx.send(shop_text)

    @commands.command(name="–∫—É–ø–∏—Ç—å—Ä–æ–ª—å")
    async def buy_role(self, ctx, role_name: str, role_color: str):
        user = ctx.author
        balance = await get_balance(user.id)
        
        if balance < CUSTOM_ROLE_PRICE:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤, —É –≤–∞—Å {balance}.")
            return
        
        existing_role = await get_custom_role(user.id)
        if existing_role:
            try:
                old_role = ctx.guild.get_role(existing_role['role_id'])
                if old_role:
                    await old_role.delete()
            except:
                pass
        
        try:
            color = discord.Color.from_str(role_color)
            new_role = await ctx.guild.create_role(
                name=role_name,
                color=color,
                reason=f"–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å –¥–ª—è {user.name}"
            )
            
            await user.add_roles(new_role)
            await create_custom_role(user.id, new_role.id, role_name, role_color)
            await update_balance(user.id, -CUSTOM_ROLE_PRICE)
            
            msg = await ctx.send(f"‚úÖ {user.mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {new_role.mention} –∑–∞ {CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            await delete_after_delay(msg, 60)
        except ValueError:
            await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEX —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: `#ff0000`")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @commands.command(name="–ø–æ–º–æ—â—å")
    async def help_command(self, ctx):
        help_text = """
üìú **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

üî¥ `!—Å–ª–∞–≤–∞–Ω–Ω` ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å –ü–∞—Ç—Ä–∏–æ—Ç–æ–º (2—á –∫–¥)
üåæ `!—Ñ–∞—Ä–º` ‚Äî –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (20–º –∫–¥, —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤)
üí∞ `!–±–∞–ª–∞–Ω—Å` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å (5—Å –∫–¥)
üí∏ `!–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ @—é–∑–µ—Ä —Å—É–º–º–∞` ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –∫—Ä–µ–¥–∏—Ç–æ–≤
üèÜ `!—Ç–æ–ø` ‚Äî —Ç–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É (5—Å –∫–¥)
üé∞ `!—Ä—É–ª–µ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∞` ‚Äî –∏–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É (30—Å –∫–¥)
üõç `!–º–∞–≥–∞–∑–∏–Ω` ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
üé® `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ù–∞–∑–≤–∞–Ω–∏–µ" #–¶–≤–µ—Ç` ‚Äî –∫—É–ø–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å (2000 –∫—Ä–µ–¥–∏—Ç–æ–≤)
‚ûï `!–¥–æ–ø–∫—Ä–µ–¥–∏—Ç @—é–∑–µ—Ä —Å—É–º–º–∞` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
‚ûñ `!–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç @—é–∑–µ—Ä —Å—É–º–º–∞` ‚Äî —Å–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
üë• `!—Å–æ–∑–¥–∞—Ç—å–∫–ª–∞–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ` ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω
üë• `!–≤–æ–π—Ç–∏–≤–∫–ª–∞–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ` ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω
üèÜ `!–∫–ª–∞–Ω—Ç–æ–ø` ‚Äî —Ç–æ–ø –∫–ª–∞–Ω–æ–≤
üë§ `!–ø—Ä–æ—Ñ–∏–ª—å @—é–∑–µ—Ä` ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
üìù `!–æ–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—Å—Ç` ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
üéÅ `!–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π` ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (24—á –∫–¥)
‚öîÔ∏è `!–¥—É—ç–ª—å @–∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∫–∞` ‚Äî PvP –¥—É—ç–ª—å (5–º –∫–¥)
‚ÑπÔ∏è `!–ø–æ–º–æ—â—å` ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–ü—Ä–∏–º–µ—Ä—ã:**
`!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ë–æ–≥–∞—á" #ff0000`
`!–¥–æ–ø–∫—Ä–µ–¥–∏—Ç @User 500`
`!—Ä—É–ª–µ—Ç–∫–∞ 100`
`!–ø—Ä–æ—Ñ–∏–ª—å @–£—á–∞—Å—Ç–Ω–∏–∫`
`!–¥—É—ç–ª—å @–ò–≥—Ä–æ–∫ 200`
"""
        await ctx.send(help_text)

class Clans(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="—Å–æ–∑–¥–∞—Ç—å–∫–ª–∞–Ω")
    async def create_clan(self, ctx, clan_name: str):
        user = ctx.author
        balance = await get_balance(user.id)
        
        if balance < CLAN_CREATION_PRICE:
            await ctx.send(f"‚ùå –ù—É–∂–Ω–æ {CLAN_CREATION_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞!")
            return
        
        current_clan = await get_user_clan(user.id)
        if current_clan:
            await ctx.send("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return
        
        async with bot.db.acquire() as conn:
            clan_exists = await conn.fetchval(
                "SELECT EXISTS(SELECT 1 FROM clans WHERE name = $1)",
                clan_name
            )
            if clan_exists:
                await ctx.send("‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            await conn.execute(
                "INSERT INTO clans (name, owner_id, balance) VALUES ($1, $2, $3)",
                clan_name, user.id, 0
            )
            await conn.execute(
                "INSERT INTO user_clans (user_id, clan_name) VALUES ($1, $2)",
                user.id, clan_name
            )
        
        await update_balance(user.id, -CLAN_CREATION_PRICE)
        msg = await ctx.send(f"‚úÖ –ö–ª–∞–Ω '{clan_name}' —Å–æ–∑–¥–∞–Ω! –í—ã —Å—Ç–∞–ª–∏ –ª–∏–¥–µ—Ä–æ–º.")
        await delete_after_delay(msg, 60)

    @commands.command(name="–≤–æ–π—Ç–∏–≤–∫–ª–∞–Ω")
    async def join_clan(self, ctx, clan_name: str):
        user = ctx.author
        
        current_clan = await get_user_clan(user.id)
        if current_clan:
            await ctx.send("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return
        
        async with bot.db.acquire() as conn:
            clan_exists = await conn.fetchval(
                "SELECT EXISTS(SELECT 1 FROM clans WHERE name = $1)",
                clan_name
            )
            
            if not clan_exists:
                await ctx.send("‚ùå –¢–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            await conn.execute(
                "INSERT INTO user_clans (user_id, clan_name) VALUES ($1, $2)",
                user.id, clan_name
            )
        
        msg = await ctx.send(f"‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω '{clan_name}'!")
        await delete_after_delay(msg, 60)

    @commands.command(name="–∫–ª–∞–Ω—Ç–æ–ø")
    async def clan_top(self, ctx):
        async with bot.db.acquire() as conn:
            top_clans = await conn.fetch(
                "SELECT name, balance FROM clans ORDER BY balance DESC LIMIT 10"
            )
        
        if not top_clans:
            await ctx.send("üòî –ö–ª–∞–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        leaderboard = []
        for i, clan in enumerate(top_clans, start=1):
            leaderboard.append(f"{i}. {clan['name']} ‚Äî {clan['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        
        await ctx.send("üèÜ **–¢–æ–ø –∫–ª–∞–Ω–æ–≤:**\n" + "\n".join(leaderboard))

class Profile(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="–ø—Ä–æ—Ñ–∏–ª—å")
    async def profile(self, ctx, member: discord.Member = None):
        if not member:
            member = ctx.author
        
        balance = await get_balance(member.id)
        clan = await get_user_clan(member.id)
        description = await get_profile_description(member.id)
        level_data = await get_level_data(member.id)
        
        embed = Embed(
            title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {member.name}",
            color=member.color,
            description=description
        )
        
        avatar_url = member.avatar.url if member.avatar else member.default_avatar.url
        embed.set_thumbnail(url=avatar_url)
        
        embed.add_field(name="üí∞ –ë–∞–ª–∞–Ω—Å", value=f"{balance} –∫—Ä–µ–¥–∏—Ç–æ–≤", inline=True)
        embed.add_field(name="üë• –ö–ª–∞–Ω", value=clan if clan else "–ù–µ—Ç –∫–ª–∞–Ω–∞", inline=True)
        embed.add_field(name="üìä –£—Ä–æ–≤–µ–Ω—å", value=f"{level_data['level']} ({level_data['xp']} XP)", inline=True)
        
        embed.set_footer(text=f"ID: {member.id}")
        
        await ctx.send(embed=embed)

    @commands.command(name="–æ–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–æ—Ñ–∏–ª—å")
    async def set_profile_description(self, ctx, *, description: str):
        if len(description) > 200:
            await ctx.send("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤!")
            return
        
        await update_profile_description(ctx.author.id, description)
        msg = await ctx.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await delete_after_delay(msg, 60)

  class Mod(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def is_admin(self, member):
        return any(role.name.lower() in [r.lower() for r in ADMIN_ROLES] for role in member.roles)

    @commands.command(name="–º—É—Ç")
    async def mute(self, ctx, member: discord.Member, time: int, *, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        mute_role = discord.utils.get(ctx.guild.roles, name=MUTE_ROLE_NAME)
        if not mute_role:
            mute_role = await ctx.guild.create_role(
                name=MUTE_ROLE_NAME,
                reason="–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –º—å—é—Ç–∞"
            )
            
            for channel in ctx.guild.channels:
                await channel.set_permissions(mute_role, send_messages=False, speak=False)
        
        await member.add_roles(mute_role)
        msg = await ctx.send(f"‚úÖ {member.mention} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {time} –º–∏–Ω—É—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")
        await delete_after_delay(msg, 60)

    @commands.command(name="—Ä–∞–∑–º—É—Ç")
    async def unmute(self, ctx, member: discord.Member):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        mute_role = discord.utils.get(ctx.guild.roles, name=MUTE_ROLE_NAME)
        if mute_role and mute_role in member.roles:
            await member.remove_roles(mute_role)
            msg = await ctx.send(f"‚úÖ {member.mention} —Ä–∞–∑–º—å—é—á–µ–Ω!")
            await delete_after_delay(msg, 60)
        else:
            await ctx.send("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–º—å—é—á–µ–Ω!")

class Fun(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π")
    @commands.cooldown(1, 86400, commands.BucketType.user)
    async def daily(self, ctx):
        reward = random.randint(100, 500)
        await update_balance(ctx.author.id, reward)
        msg = await ctx.send(f"üéÅ {ctx.author.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        await delete_after_delay(msg, 60)

    @commands.command(name="—Ä—É–ª–µ—Ç–∫–∞")
    @commands.cooldown(1, 30, commands.BucketType.user)
    async def roulette(self, ctx, bet: int):
        if bet <= 0:
            await ctx.send("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        balance = await get_balance(ctx.author.id)
        if balance < bet:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            return

        outcome = random.choice(["win", "lose", "refund"])

        if outcome == "win":
            await update_balance(ctx.author.id, bet)
            msg = await ctx.send(f"üéâ {ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª {bet} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        elif outcome == "lose":
            await update_balance(ctx.author.id, -bet)
            msg = await ctx.send(f"üíÄ {ctx.author.mention} –ø—Ä–æ–∏–≥—Ä–∞–ª {bet} –∫—Ä–µ–¥–∏—Ç–æ–≤...")
        else:
            msg = await ctx.send(f"üîÑ {ctx.author.mention} –≤–µ—Ä–Ω—É–ª —Å–≤–æ–∏ {bet} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        
        await delete_after_delay(msg, 60)

    @commands.command(name="–¥—É—ç–ª—å")
    @commands.cooldown(1, 300, commands.BucketType.user)
    async def duel(self, ctx, member: discord.Member, bet: int):
        if member == ctx.author:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        if bet <= 0:
            await ctx.send("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        challenger_balance = await get_balance(ctx.author.id)
        target_balance = await get_balance(member.id)
        
        if challenger_balance < bet:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            return
        if target_balance < bet:
            await ctx.send("‚ùå –£ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            return
        
        # –°–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ö–æ–¥ 50/50
        winner = ctx.author if random.random() > 0.5 else member
        loser = member if winner == ctx.author else ctx.author
        
        # –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥
        await update_balance(winner.id, bet)
        await update_balance(loser.id, -bet)

      
        
        embed = Embed(
            title="‚öîÔ∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            description=f"{winner.mention} –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏ –∑–∞–±–∏—Ä–∞–µ—Ç {bet} –∫—Ä–µ–¥–∏—Ç–æ–≤ —É {loser.mention}!",
            color=Colour.green()
        )
        msg = await ctx.send(embed=embed)
        await delete_after_delay(msg, 60)
      class Events(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î –≥–æ—Ç–æ–≤—ã!")

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            seconds = int(error.retry_after)
            minutes = seconds // 60
            seconds = seconds % 60
            await ctx.send(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes}–º {seconds}—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.")
        else:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {error}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

    @commands.Cog.listener()
    async def on_message(self, message):
        if not message.author.bot:
            # –î–∞–µ–º XP –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É)
            user_id = message.author.id
            current_data = await get_level_data(user_id)
            current_xp = current_data['xp']
            current_level = current_data['level']
            
            # –î–æ–±–∞–≤–ª—è–µ–º XP
            xp_gain = random.randint(5, 15)
            new_xp = current_xp + xp_gain
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            xp_needed = current_level * 100
            new_level = current_level
            
            if new_xp >= xp_needed:
                new_level += 1
                new_xp = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º XP –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
                level_msg = await message.channel.send(f"üéâ {message.author.mention} –¥–æ—Å—Ç–∏–≥ {new_level} —É—Ä–æ–≤–Ω—è!")
                await delete_after_delay(level_msg, 60)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            await update_level(user_id, new_xp, new_level)
        
        await self.bot.process_commands(message)

# –ü—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask('')

@app.route('/')
def home():
    return "ü§ñ Discord Bot is Alive!"

@app.route('/health')
def health():
    return "OK", 200

def run_web():
    app.run(host='0.0.0.0', port=8080, debug=False, use_reloader=False)
  async def setup():
    await bot.add_cog(Economy(bot))
    await bot.add_cog(Clans(bot))
    await bot.add_cog(Profile(bot))
    await bot.add_cog(Mod(bot))
    await bot.add_cog(Fun(bot))
    await bot.add_cog(Events(bot))

@bot.event
async def on_ready():
    try:
        bot.db = await create_db_pool()
        await setup()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        web_thread = Thread(target=run_web)
        web_thread.daemon = True
        web_thread.start()
        
        print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
        print("‚úÖ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        await bot.close()

async def close_db():
    if hasattr(bot, 'db') and not bot.db.is_closed():
        await bot.db.close()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

@bot.event
async def on_disconnect():
    await close_db()

def run_bot():
    try:
        asyncio.run(bot.start(TOKEN))
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    run_bot()

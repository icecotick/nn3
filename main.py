import discord
from discord.ext import commands
from discord.ext.commands import CommandOnCooldown
import random
import os
import asyncpg
import asyncio
from datetime import datetime, timedelta

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
TOKEN = os.getenv("DISCORD_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
ROLE_NAME = "–ü–∞—Ç—Ä–∏–æ—Ç"
ADMIN_ROLES = ["—Å–æ–∑–¥–∞—Ç–µ–ª—å", "–≥–ª–∞–≤–Ω—ã–π –º–æ–¥–µ—Ä"]
CUSTOM_ROLE_PRICE = 2000
CRIT_CHANCE = 10
SUCCESS_CHANCE = 40
CLAN_CREATION_PRICE = 5000
MUTE_ROLE_NAME = "Muted"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DISCORD_TOKEN")
    exit(1)

if not DATABASE_URL:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DATABASE_URL")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Discord
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
async def create_db_pool():
    try:
        pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)
        async with pool.acquire() as conn:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    balance INTEGER DEFAULT 0,
                    profile_description TEXT,
                    daily_claimed TIMESTAMP,
                    farm_booster_until TIMESTAMP,
                    roulette_booster_until TIMESTAMP,
                    business_license TEXT,
                    business_income INTEGER DEFAULT 0,
                    last_business_claim TIMESTAMP
                )
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–æ–ª–µ–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS custom_roles (
                    user_id BIGINT PRIMARY KEY,
                    role_id BIGINT,
                    role_name TEXT,
                    role_color TEXT
                )
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∞–Ω–æ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS clans (
                    name TEXT PRIMARY KEY,
                    owner_id BIGINT,
                    balance INTEGER DEFAULT 0,
                    member_slots INTEGER DEFAULT 10,
                    income_multiplier DECIMAL DEFAULT 1.0
                )
            """)
            # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–ª–∞–Ω–æ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS user_clans (
                    user_id BIGINT PRIMARY KEY,
                    clan_name TEXT
                )
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–º–∏—É–º —Ä–æ–ª–µ–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS premium_roles (
                    user_id BIGINT PRIMARY KEY,
                    role_type TEXT,
                    purchased_at TIMESTAMP DEFAULT NOW()
                )
            """)
        return pool
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        exit(1)

# –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def get_balance(user_id: int):
    async with bot.db.acquire() as conn:
        result = await conn.fetchrow("SELECT balance FROM users WHERE user_id = $1", user_id)
        return result["balance"] if result else 0

async def update_balance(user_id: int, amount: int):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, balance) VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE SET balance = users.balance + $2
        """, user_id, amount)

async def get_user_data(user_id: int):
    async with bot.db.acquire() as conn:
        return await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)


# ==================== –≠–ö–û–ù–û–ú–ò–ö–ê ====================
class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def is_admin(self, member):
        return any(role.name.lower() in [r.lower() for r in ADMIN_ROLES] for role in member.roles)

    # ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
    @commands.command(name="—Å–ª–∞–≤–∞–Ω–Ω")
    @commands.cooldown(1, 7200, commands.BucketType.user)
    async def slav_party(self, ctx):
        user = ctx.author
        role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

        if not role:
            await ctx.send('‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
            return

        if role in user.roles:
            await ctx.send(f'üü• {user.mention}, —Ç—ã —É–∂–µ –ü–∞—Ç—Ä–∏–æ—Ç!')
            return

        roll = random.randint(1, 100)
        balance = await get_balance(user.id)

        if roll <= CRIT_CHANCE:
            await user.add_roles(role)
            await update_balance(user.id, 1000)
            await ctx.send(f'üí• **–ö–†–ò–¢!** {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 1000 —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

        elif roll <= SUCCESS_CHANCE:
            await user.add_roles(role)
            await update_balance(user.id, 100)
            await ctx.send(f'üü• {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 100 —Ä–µ–π—Ç–∏–Ω–≥–∞! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

        else:
            penalty = min(10, balance)
            await update_balance(user.id, -penalty)
            await ctx.send(f'üïä {user.mention}, -{penalty} —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

    @commands.command(name="—Ñ–∞—Ä–º")
    @commands.cooldown(1, 1200, commands.BucketType.user)
    async def farm(self, ctx):
        user = ctx.author
        role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

        if not role or role not in user.roles:
            await ctx.send("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–µ—Ä–∞ —Ñ–∞—Ä–º–∞
        user_data = await get_user_data(user.id)
        base_reward = random.randint(30, 70)
        
        if user_data and user_data['farm_booster_until'] and user_data['farm_booster_until'] > datetime.now():
            reward = int(base_reward * 1.5)  # +50% —Å –±—É—Å—Ç–µ—Ä–æ–º
            booster_text = " üöÄ (—Å –±—É—Å—Ç–µ—Ä–æ–º)"
        else:
            reward = base_reward
            booster_text = ""

        await update_balance(user.id, reward)
        await ctx.send(f"üåæ {user.mention}, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {reward} —Å–æ—Ü. –∫—Ä–µ–¥–∏—Ç–æ–≤{booster_text}! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})")

    @commands.command(name="–±–∞–ª–∞–Ω—Å")
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def balance(self, ctx):
        bal = await get_balance(ctx.author.id)
        await ctx.send(f'üí∞ {ctx.author.mention}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç–æ–≤')

    @commands.command(name="–ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
    async def transfer(self, ctx, member: discord.Member, amount: int):
        if amount <= 0:
            await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        if member == ctx.author:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return

        sender_balance = await get_balance(ctx.author.id)
        if sender_balance < amount:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return

        await update_balance(ctx.author.id, -amount)
        await update_balance(member.id, amount)
        await ctx.send(f'‚úÖ {ctx.author.mention} –ø–µ—Ä–µ–≤–µ–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ {member.mention}!')

    @commands.command(name="—Ç–æ–ø")
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def top(self, ctx):
        async with bot.db.acquire() as conn:
            top_users = await conn.fetch("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10")

        if not top_users:
            await ctx.send("üòî –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
            return

        leaderboard = []
        for i, record in enumerate(top_users, start=1):
            try:
                user = await bot.fetch_user(record['user_id'])
                leaderboard.append(f"{i}. {user.name} ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            except:
                leaderboard.append(f"{i}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")

        await ctx.send("üèÜ **–¢–æ–ø 10 –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤:**\n" + "\n".join(leaderboard))

    # ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========
    @commands.command(name="–¥–æ–ø–∫—Ä–µ–¥–∏—Ç")
    async def add_credits(self, ctx, member: discord.Member, amount: int):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if amount <= 0:
            await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        
        await update_balance(member.id, amount)
        new_balance = await get_balance(member.id)
        await ctx.send(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ctx.author.mention} –¥–æ–±–∞–≤–∏–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤")

    @commands.command(name="–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç")
    async def remove_credits(self, ctx, member: discord.Member, amount: int):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if amount <= 0:
            await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        
        current_balance = await get_balance(member.id)
        if current_balance < amount:
            await ctx.send(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤, –Ω–µ–ª—å–∑—è —Å–Ω—è—Ç—å {amount}!")
            return
        
        await update_balance(member.id, -amount)
        new_balance = await get_balance(member.id)
        await ctx.send(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ctx.author.mention} —Å–Ω—è–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤")

    # ========== –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ù–ê–ì–†–ê–î–ê ==========
    @commands.command(name="–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π")
    @commands.cooldown(1, 86400, commands.BucketType.user)
    async def daily(self, ctx):
        user_data = await get_user_data(ctx.author.id)
        streak = 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
        if user_data and user_data['daily_claimed']:
            last_claim = user_data['daily_claimed']
            if datetime.now() - last_claim < timedelta(hours=48):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –≤–æ–≤—Ä–µ–º—è
                streak = 2  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Å—Ç—Ä–∏–∫–∞
            else:
                # –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω
                streak = 1

        base_reward = random.randint(100, 500)
        reward = base_reward * streak
        
        await update_balance(ctx.author.id, reward)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
        async with bot.db.acquire() as conn:
            await conn.execute("""
                INSERT INTO users (user_id, daily_claimed) VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET daily_claimed = $2
            """, ctx.author.id, datetime.now())
        
        if streak > 1:
            await ctx.send(f"üéÅ {ctx.author.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Å—Ç—Ä–∏–∫ x{streak})!")
        else:
            await ctx.send(f"üéÅ {ctx.author.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∫—Ä–µ–¥–∏—Ç–æ–≤!")

    # ========== –†–£–õ–ï–¢–ö–ê ==========
    @commands.command(name="—Ä—É–ª–µ—Ç–∫–∞")
    @commands.cooldown(1, 30, commands.BucketType.user)
    async def roulette(self, ctx, bet: int):
        if bet <= 0:
            await ctx.send("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        balance = await get_balance(ctx.author.id)
        if balance < bet:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–µ—Ä–∞ —Ä—É–ª–µ—Ç–∫–∏
        user_data = await get_user_data(ctx.author.id)
        has_roulette_booster = user_data and user_data['roulette_booster_until'] and user_data['roulette_booster_until'] > datetime.now()
        
        if has_roulette_booster:
            # –° –±—É—Å—Ç–µ—Ä–æ–º —à–∞–Ω—Å—ã –ª—É—á—à–µ
            outcomes = ["win", "win", "lose", "jackpot", "refund"]
            weights = [30, 25, 20, 5, 20]
        else:
            # –û–±—ã—á–Ω—ã–µ —à–∞–Ω—Å—ã
            outcomes = ["win", "lose", "refund"]
            weights = [40, 40, 20]

        outcome = random.choices(outcomes, weights=weights)[0]

        if outcome == "win":
            win_amount = bet * 2
            await update_balance(ctx.author.id, win_amount)
            await ctx.send(f"üéâ {ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª {win_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤!{' üöÄ' if has_roulette_booster else ''}")
        elif outcome == "jackpot":
            win_amount = bet * 5
            await update_balance(ctx.author.id, win_amount)
            await ctx.send(f"üí∞ **–î–ñ–ï–ö–ü–û–¢!** {ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª {win_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤! üé∞")
        elif outcome == "lose":
            await update_balance(ctx.author.id, -bet)
            await ctx.send(f"üíÄ {ctx.author.mention} –ø—Ä–æ–∏–≥—Ä–∞–ª {bet} –∫—Ä–µ–¥–∏—Ç–æ–≤...{' üöÄ' if has_roulette_booster else ''}")
        else:
            await ctx.send(f"üîÑ {ctx.author.mention} –≤–µ—Ä–Ω—É–ª —Å–≤–æ–∏ {bet} –∫—Ä–µ–¥–∏—Ç–æ–≤.{' üöÄ' if has_roulette_booster else ''}")

    # ========== –ú–ê–ì–ê–ó–ò–ù –ò –¢–û–í–ê–†–´ ==========
    @commands.command(name="–º–∞–≥–∞–∑–∏–Ω")
    async def shop(self, ctx):
        balance = await get_balance(ctx.author.id)
        
        shop_text = f"""
üõç **–ú–∞–≥–∞–∑–∏–Ω —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞:**

üé® **–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–æ–ª–∏**
`!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ù–∞–∑–≤–∞–Ω–∏–µ" #–¶–≤–µ—Ç` - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–ª—å ({CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤)

üè∑ **–ü—Ä–µ–º–∏—É–º-—Ä–æ–ª–∏** (–ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Ç–æ–ø–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
`!–∫—É–ø–∏—Ç—å–ø—Ä–µ–º–∏—É–º –∑–æ–ª–æ—Ç–æ–π` - –ó–æ–ª–æ—Ç–∞—è —Ä–æ–ª—å (5000 –∫—Ä–µ–¥–∏—Ç–æ–≤)
`!–∫—É–ø–∏—Ç—å–ø—Ä–µ–º–∏—É–º –ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π` - –ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è —Ä–æ–ª—å (10000 –∫—Ä–µ–¥–∏—Ç–æ–≤)

üéÅ **–ë—É—Å—Ç–µ—Ä—ã –¥–æ—Ö–æ–¥–æ–≤**
`!–±—É—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞` - +50% –∫ —Ñ–∞—Ä–º—É –Ω–∞ 24 —á–∞—Å–∞ (1500 –∫—Ä–µ–¥–∏—Ç–æ–≤)
`!–±—É—Å—Ç–µ—Ä —Ä—É–ª–µ—Ç–∫–∏` - +25% –∫ —à–∞–Ω—Å—É –≤—ã–∏–≥—Ä—ã—à–∞ –Ω–∞ 12 —á–∞—Å–æ–≤ (2000 –∫—Ä–µ–¥–∏—Ç–æ–≤)

üíº **–ë–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏–∏** (–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥)
`!–∫—É–ø–∏—Ç—å–ª–∏—Ü–µ–Ω–∑–∏—é –º–∞–ª—ã–π` - –ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å (+100 –∫—Ä–µ–¥–∏—Ç–æ–≤/—á–∞—Å, 8000 –∫—Ä–µ–¥–∏—Ç–æ–≤)
`!–∫—É–ø–∏—Ç—å–ª–∏—Ü–µ–Ω–∑–∏—é —Å—Ä–µ–¥–Ω–∏–π` - –°—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å (+250 –∫—Ä–µ–¥–∏—Ç–æ–≤/—á–∞—Å, 15000 –∫—Ä–µ–¥–∏—Ç–æ–≤)
`!–∫—É–ø–∏—Ç—å–ª–∏—Ü–µ–Ω–∑–∏—é –∫—Ä—É–ø–Ω—ã–π` - –ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å (+500 –∫—Ä–µ–¥–∏—Ç–æ–≤/—á–∞—Å, 30000 –∫—Ä–µ–¥–∏—Ç–æ–≤)

üéØ **–û—Å–æ–±—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**
`!—Å–º–µ–Ω–∏—Ç—å–Ω–∏–∫ "–Ω–æ–≤—ã–π –Ω–∏–∫"` - –°–º–µ–Ω–∞ –Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (3000 –∫—Ä–µ–¥–∏—Ç–æ–≤)
`!–∞–Ω–æ–Ω—Å —Ç–µ–∫—Å—Ç` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü. –∫–∞–Ω–∞–ª (5000 –∫—Ä–µ–¥–∏—Ç–æ–≤)

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã:**
`!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ë–æ–≥–∞—á" #ff0000`
`!–±—É—Å—Ç–µ—Ä —Ñ–∞—Ä–º–∞`
`!–∫—É–ø–∏—Ç—å–ª–∏—Ü–µ–Ω–∑–∏—é –º–∞–ª—ã–π`
"""
        await ctx.send(shop_text)

    @commands.command(name="–∫—É–ø–∏—Ç—å—Ä–æ–ª—å")
    async def buy_role(self, ctx, role_name: str, role_color: str):
        user = ctx.author
        balance = await get_balance(user.id)
        
        if balance < CUSTOM_ROLE_PRICE:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤, —É –≤–∞—Å {balance}.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å
        async with bot.db.acquire() as conn:
            existing_role = await conn.fetchrow("SELECT * FROM custom_roles WHERE user_id = $1", user.id)
        
        if existing_role:
            try:
                old_role = ctx.guild.get_role(existing_role['role_id'])
                if old_role:
                    await old_role.delete()
            except:
                pass
        
        try:
            color = discord.Color.from_str(role_color)
            new_role = await ctx.guild.create_role(
                name=role_name,
                color=color,
                reason=f"–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å –¥–ª—è {user.name}"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–æ–ª–∏ (–≤—ã—à–µ –æ–±—ã—á–Ω—ã—Ö —Ä–æ–ª–µ–π)
            positions = {role: role.position for role in ctx.guild.roles}
            target_position = max(positions.values()) - 5  # –ù–∞ 5 –ø–æ–∑–∏—Ü–∏–π –Ω–∏–∂–µ —Å–∞–º–æ–π –≤–µ—Ä—Ö–Ω–µ–π
            
            await new_role.edit(position=target_position)
            await user.add_roles(new_role)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            async with bot.db.acquire() as conn:
                await conn.execute("""
                    INSERT INTO custom_roles (user_id, role_id, role_name, role_color)
                    VALUES ($1, $2, $3, $4)
                    ON CONFLICT (user_id) DO UPDATE SET
                    role_id = $2, role_name = $3, role_color = $4
                """, user.id, new_role.id, role_name, role_color)
            
            await update_balance(user.id, -CUSTOM_ROLE_PRICE)
            await ctx.send(f"‚úÖ {user.mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {new_role.mention} –∑–∞ {CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            
        except ValueError:
            await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEX —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: `#ff0000`")
        except discord.Forbidden:
            await ctx.send("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @commands.command(name="–∫—É–ø–∏—Ç—å–ø—Ä–µ–º–∏—É–º")
    async def buy_premium_role(self, ctx, role_type: str):
        user = ctx.author
        balance = await get_balance(user.id)
        
        premium_roles = {
            "–∑–æ–ª–æ—Ç–æ–π": {"price": 5000, "color": discord.Color.gold()},
            "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π": {"price": 10000, "color": discord.Color.light_grey()}
        }
        
        role_type = role_type.lower()
        if role_type not in premium_roles:
            await ctx.send("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–º–∏—É–º-—Ä–æ–ª–∏: '–∑–æ–ª–æ—Ç–æ–π', '–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π'")
            return
        
        role_data = premium_roles[role_type]
        if balance < role_data["price"]:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {role_data['price']} –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            return
        
        role_name = f"{role_type.capitalize()} –ü–∞—Ç—Ä–∏–æ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å
        existing_role = discord.utils.get(ctx.guild.roles, name=role_name)
        if not existing_role:
            existing_role = await ctx.guild.create_role(
                name=role_name,
                color=role_data["color"],
                hoist=True,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                reason="–ü—Ä–µ–º–∏—É–º —Ä–æ–ª—å –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"
            )
        
        await user.add_roles(existing_role)
        await update_balance(user.id, -role_data["price"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with bot.db.acquire() as conn:
            await conn.execute("""
                INSERT INTO premium_roles (user_id, role_type) VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET role_type = $2
            """, user.id, role_type)
        
        await ctx.send(f"‚úÖ {user.mention}, –≤—ã –∫—É–ø–∏–ª–∏ –ø—Ä–µ–º–∏—É–º-—Ä–æ–ª—å {existing_role.mention}!")

    @commands.command(name="–±—É—Å—Ç–µ—Ä")
    async def buy_booster(self, ctx, booster_type: str):
        user = ctx.author
        balance = await get_balance(user.id)
        
        boosters = {
            "—Ñ–∞—Ä–º–∞": {"price": 1500, "duration": 86400, "multiplier": 1.5},  # 24 —á–∞—Å–∞
            "—Ä—É–ª–µ—Ç–∫–∏": {"price": 2000, "duration": 43200, "multiplier": 1.25}  # 12 —á–∞—Å–æ–≤
        }
        
        booster_type = booster_type.lower()
        if booster_type not in boosters:
            await ctx.send("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—É—Å—Ç–µ—Ä—ã: '—Ñ–∞—Ä–º–∞', '—Ä—É–ª–µ—Ç–∫–∏'")
            return
        
        booster_data = boosters[booster_type]
        if balance < booster_data["price"]:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {booster_data['price']} –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—É—Å—Ç–µ—Ä
        booster_until = datetime.now() + timedelta(seconds=booster_data["duration"])
        
        async with bot.db.acquire() as conn:
            if booster_type == "—Ñ–∞—Ä–º–∞":
                await conn.execute("""
                    INSERT INTO users (user_id, farm_booster_until) VALUES ($1, $2)
                    ON CONFLICT (user_id) DO UPDATE SET farm_booster_until = $2
                """, user.id, booster_until)
            else:  # —Ä—É–ª–µ—Ç–∫–∏
                await conn.execute("""
                    INSERT INTO users (user_id, roulette_booster_until) VALUES ($1, $2)
                    ON CONFLICT (user_id) DO UPDATE SET roulette_booster_until = $2
                """, user.id, booster_until)
        
        await update_balance(user.id, -booster_data["price"])
        
        hours = booster_data["duration"] // 3600
        await ctx.send(f"üöÄ {user.mention}, –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±—É—Å—Ç–µ—Ä {booster_type} –Ω–∞ {hours} —á–∞—Å–æ–≤!")

    @commands.command(name="–∫—É–ø–∏—Ç—å–ª–∏—Ü–µ–Ω–∑–∏—é")
    async def buy_license(self, ctx, license_type: str):
        user = ctx.author
        balance = await get_balance(user.id)
        
        licenses = {
            "–º–∞–ª—ã–π": {"price": 8000, "income": 100},
            "—Å—Ä–µ–¥–Ω–∏–π": {"price": 15000, "income": 250},
            "–∫—Ä—É–ø–Ω—ã–π": {"price": 30000, "income": 500}
        }
        
        license_type = license_type.lower()
        if license_type not in licenses:
            await ctx.send("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏: '–º–∞–ª—ã–π', '—Å—Ä–µ–¥–Ω–∏–π', '–∫—Ä—É–ø–Ω—ã–π'")
            return
        
        license_data = licenses[license_type]
        if balance < license_data["price"]:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {license_data['price']} –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            return
        
        # –ü–æ–∫—É–ø–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        async with bot.db.acquire() as conn:
            await conn.execute("""
                INSERT INTO users (user_id, business_license, business_income, last_business_claim) 
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO UPDATE SET 
                business_license = $2, business_income = $3, last_business_claim = $4
            """, user.id, license_type, license_data["income"], datetime.now())
        
        await update_balance(user.id, -license_data["price"])
        await ctx.send(f"üíº {user.mention}, –≤—ã –∫—É–ø–∏–ª–∏ {license_type} –±–∏–∑–Ω–µ—Å! (+{license_data['income']} –∫—Ä–µ–¥–∏—Ç–æ–≤/—á–∞—Å)")

    @commands.command(name="—Å–º–µ–Ω–∏—Ç—å–Ω–∏–∫")
    async def change_nickname(self, ctx, *, new_nickname: str):
        user = ctx.author
        balance = await get_balance(user.id)
        price = 3000
        
        if balance < price:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {price} –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            return
        
        if len(new_nickname) > 32:
            await ctx.send("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫! –ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        try:
            await user.edit(nick=new_nickname)
            await update_balance(user.id, -price)
            await ctx.send(f"‚úÖ {user.mention}, –≤–∞—à –Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_nickname}'!")
        except discord.Forbidden:
            await ctx.send("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞!")

    @commands.command(name="–∞–Ω–æ–Ω—Å")
    async def make_announcement(self, ctx, *, announcement: str):
        user = ctx.author
        balance = await get_balance(user.id)
        price = 5000
        
        if balance < price:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {price} –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            return
        
        # –ò—â–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–æ–Ω—Å–æ–≤
        announcement_channel = discord.utils.get(ctx.guild.text_channels, name="–∞–Ω–æ–Ω—Å—ã")
        if not announcement_channel:
            announcement_channel = ctx.channel
        
        embed = discord.Embed(
            title="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
            description=announcement,
            color=0x00ff00,
            timestamp=datetime.now()
        )
        embed.set_author(name=user.display_name, icon_url=user.avatar.url if user.avatar else user.default_avatar.url)
        embed.set_footer(text="–ö—É–ø–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: !–∞–Ω–æ–Ω—Å —Ç–µ–∫—Å—Ç")
        
        await announcement_channel.send(embed=embed)
        await update_balance(user.id, -price)
        await ctx.send(f"‚úÖ {user.mention}, –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")

    # ========== –ö–û–ú–ê–ù–î–ê –ü–û–ú–û–©–ò ==========
    @commands.command(name="–ø–æ–º–æ—â—å")
    async def help_command(self, ctx):
        try:
            help_text = """
üìú **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

üî∞ **–û—Å–Ω–æ–≤–Ω—ã–µ**
üî¥ !—Å–ª–∞–≤–∞–Ω–Ω ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å –ü–∞—Ç—Ä–∏–æ—Ç–æ–º (2—á –∫–¥)
üåæ !—Ñ–∞—Ä–º ‚Äî –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (20–º –∫–¥, —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤)  
üí∞ !–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å (5—Å –∫–¥)
üéÅ !–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (24—á –∫–¥)

üí∏ **–≠–∫–æ–Ω–æ–º–∏–∫–∞**
üí∏ !–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ @—é–∑–µ—Ä —Å—É–º–º–∞ ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –∫—Ä–µ–¥–∏—Ç–æ–≤
üé∞ !—Ä—É–ª–µ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∞ ‚Äî –∏–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É (30—Å –∫–¥)
üèÜ !—Ç–æ–ø ‚Äî —Ç–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É (5—Å –∫–¥)

üõç **–ú–∞–≥–∞–∑–∏–Ω** 
üõç !–º–∞–≥–∞–∑–∏–Ω ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω
üé® !–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ù–∞–∑–≤–∞–Ω–∏–µ" #–¶–≤–µ—Ç ‚Äî –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å (2000–∫)
‚≠ê !–∫—É–ø–∏—Ç—å–ø—Ä–µ–º–∏—É–º —Ç–∏–ø ‚Äî –ø—Ä–µ–º–∏—É–º-—Ä–æ–ª—å (5000-10000–∫)
üöÄ !–±—É—Å—Ç–µ—Ä —Ç–∏–ø ‚Äî –±—É—Å—Ç–µ—Ä—ã –¥–æ—Ö–æ–¥–æ–≤ (1500-2000–∫)
üíº !–∫—É–ø–∏—Ç—å–ª–∏—Ü–µ–Ω–∑–∏—é —Ç–∏–ø ‚Äî –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏–∏ (8000-30000–∫)
üìù !—Å–º–µ–Ω–∏—Ç—å–Ω–∏–∫ "–Ω–∏–∫" ‚Äî —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ (3000–∫)
üì¢ !–∞–Ω–æ–Ω—Å —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (5000–∫)

üë• **–ö–ª–∞–Ω—ã**
üë• !—Å–æ–∑–¥–∞—Ç—å–∫–ª–∞–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω (5000–∫)
üë• !–≤–æ–π—Ç–∏–≤–∫–ª–∞–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω
üèÜ !–∫–ª–∞–Ω—Ç–æ–ø ‚Äî —Ç–æ–ø –∫–ª–∞–Ω–æ–≤

üë§ **–ü—Ä–æ—Ñ–∏–ª—å**
üë§ !–ø—Ä–æ—Ñ–∏–ª—å [@—é–∑–µ—Ä] ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
üìù !–æ–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—Å—Ç ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ

‚öôÔ∏è **–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã**
‚ûï !–¥–æ–ø–∫—Ä–µ–¥–∏—Ç @—é–∑–µ—Ä —Å—É–º–º–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
‚ûñ !–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç @—é–∑–µ—Ä —Å—É–º–º–∞ ‚Äî —Å–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã

‚ÑπÔ∏è !–ø–æ–º–æ—â—å ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
            await ctx.send(help_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–º–æ—â—å: {e}")
            await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

# –ó–ê–ö–†–´–í–ê–ï–ú –ö–õ–ê–°–° ECONOMY
# ==================== –ö–õ–ê–ù–´ ====================
class Clans(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def get_clan_members(self, clan_name: str):
        async with bot.db.acquire() as conn:
            return await conn.fetch("SELECT user_id FROM user_clans WHERE clan_name = $1", clan_name)

    async def get_clan_member_count(self, clan_name: str):
        async with bot.db.acquire() as conn:
            return await conn.fetchval("SELECT COUNT(*) FROM user_clans WHERE clan_name = $1", clan_name)

    @commands.command(name="—Å–æ–∑–¥–∞—Ç—å–∫–ª–∞–Ω")
    async def create_clan(self, ctx, clan_name: str):
        user = ctx.author
        balance = await get_balance(user.id)
        
        if balance < CLAN_CREATION_PRICE:
            await ctx.send(f"‚ùå –ù—É–∂–Ω–æ {CLAN_CREATION_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞!")
            return
        
        current_clan = await get_user_clan(user.id)
        if current_clan:
            await ctx.send("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∫–ª–∞–Ω–∞
        if len(clan_name) > 20:
            await ctx.send("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤!")
            return
        
        async with bot.db.acquire() as conn:
            clan_exists = await conn.fetchval(
                "SELECT EXISTS(SELECT 1 FROM clans WHERE name = $1)",
                clan_name
            )
            if clan_exists:
                await ctx.send("‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–Ω
            await conn.execute(
                "INSERT INTO clans (name, owner_id, balance) VALUES ($1, $2, $3)",
                clan_name, user.id, 0
            )
            await conn.execute(
                "INSERT INTO user_clans (user_id, clan_name) VALUES ($1, $2)",
                user.id, clan_name
            )
        
        await update_balance(user.id, -CLAN_CREATION_PRICE)
        await ctx.send(f"‚úÖ –ö–ª–∞–Ω '{clan_name}' —Å–æ–∑–¥–∞–Ω! –í—ã —Å—Ç–∞–ª–∏ –ª–∏–¥–µ—Ä–æ–º.")

    @commands.command(name="–≤–æ–π—Ç–∏–≤–∫–ª–∞–Ω")
    async def join_clan(self, ctx, clan_name: str):
        user = ctx.author
        
        current_clan = await get_user_clan(user.id)
        if current_clan:
            await ctx.send("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return
        
        async with bot.db.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞
            clan = await conn.fetchrow("SELECT * FROM clans WHERE name = $1", clan_name)
            if not clan:
                await ctx.send("‚ùå –¢–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            member_count = await self.get_clan_member_count(clan_name)
            if member_count >= clan['member_slots']:
                await ctx.send("‚ùå –í –∫–ª–∞–Ω–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç!")
                return
            
            # –í—Å—Ç—É–ø–∞–µ–º –≤ –∫–ª–∞–Ω
            await conn.execute(
                "INSERT INTO user_clans (user_id, clan_name) VALUES ($1, $2)",
                user.id, clan_name
            )
        
        await ctx.send(f"‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω '{clan_name}'!")

    @commands.command(name="–ø–æ–∫–∏–Ω—É—Ç—å–∫–ª–∞–Ω")
    async def leave_clan(self, ctx):
        user = ctx.author
        current_clan = await get_user_clan(user.id)
        
        if not current_clan:
            await ctx.send("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return
        
        async with bot.db.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            clan_owner = await conn.fetchval("SELECT owner_id FROM clans WHERE name = $1", current_clan)
            if clan_owner == user.id:
                await ctx.send("‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –µ–≥–æ –ø–æ–∫–∏–Ω—É—Ç—å! –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥–∞–π—Ç–µ ownership.")
                return
            
            await conn.execute("DELETE FROM user_clans WHERE user_id = $1", user.id)
        
        await ctx.send(f"‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω '{current_clan}'!")

    @commands.command(name="–∫–ª–∞–Ω")
    async def clan_info(self, ctx, clan_name: str = None):
        if not clan_name:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∫–ª–∞–Ω–µ
            user_clan = await get_user_clan(ctx.author.id)
            if not user_clan:
                await ctx.send("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ! –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞.")
                return
            clan_name = user_clan
        
        async with bot.db.acquire() as conn:
            clan = await conn.fetchrow("SELECT * FROM clans WHERE name = $1", clan_name)
            if not clan:
                await ctx.send("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            members = await self.get_clan_members(clan_name)
            member_count = len(members)
            
            try:
                owner = await bot.fetch_user(clan['owner_id'])
                owner_name = owner.name
            except:
                owner_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        embed = discord.Embed(
            title=f"üè∞ –ö–ª–∞–Ω: {clan_name}",
            color=0x00ff00
        )
        
        embed.add_field(name="üëë –í–ª–∞–¥–µ–ª–µ—Ü", value=owner_name, inline=True)
        embed.add_field(name="üí∞ –ö–∞–∑–Ω–∞", value=f"{clan['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤", inline=True)
        embed.add_field(name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", value=f"{member_count}/{clan['member_slots']}", inline=True)
        embed.add_field(name="üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ—Ö–æ–¥–∞", value=f"x{clan['income_multiplier']}", inline=True)
        
        # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–µ—Ä–≤—ã–µ 10)
        member_list = []
        for i, member in enumerate(members[:10], 1):
            try:
                member_user = await bot.fetch_user(member['user_id'])
                member_list.append(f"{i}. {member_user.name}")
            except:
                member_list.append(f"{i}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        if member_list:
            embed.add_field(name="üéØ –£—á–∞—Å—Ç–Ω–∏–∫–∏", value="\n".join(member_list), inline=False)
        
        await ctx.send(embed=embed)

    @commands.command(name="–∫–ª–∞–Ω—Ç–æ–ø")
    async def clan_top(self, ctx):
        async with bot.db.acquire() as conn:
            top_clans = await conn.fetch(
                "SELECT name, balance, member_slots FROM clans ORDER BY balance DESC LIMIT 10"
            )
        
        if not top_clans:
            await ctx.send("üòî –ö–ª–∞–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        leaderboard = []
        for i, clan in enumerate(top_clans, start=1):
            member_count = await self.get_clan_member_count(clan['name'])
            leaderboard.append(f"{i}. **{clan['name']}** ‚Äî {clan['balance']}–∫ | {member_count}/{clan['member_slots']} —á–µ–ª.")
        
        embed = discord.Embed(
            title="üèÜ –¢–æ–ø –∫–ª–∞–Ω–æ–≤ –ø–æ –∫–∞–∑–Ω–µ",
            description="\n".join(leaderboard),
            color=0xffd700
        )
        await ctx.send(embed=embed)

    @commands.command(name="–≤–Ω–µ—Å—Ç–∏_–∫–ª–∞–Ω")
    async def clan_deposit(self, ctx, amount: int):
        user = ctx.author
        clan_name = await get_user_clan(user.id)
        
        if not clan_name:
            await ctx.send("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return
        
        if amount <= 0:
            await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        
        user_balance = await get_balance(user.id)
        if user_balance < amount:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –∫–∞–∑–Ω—É –∫–ª–∞–Ω–∞
        await update_balance(user.id, -amount)
        async with bot.db.acquire() as conn:
            await conn.execute(
                "UPDATE clans SET balance = balance + $1 WHERE name = $2",
                amount, clan_name
            )
        
        await ctx.send(f"‚úÖ {user.mention} –≤–Ω–µ—Å {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –∫–∞–∑–Ω—É –∫–ª–∞–Ω–∞ '{clan_name}'!")

    @commands.command(name="—Å–Ω—è—Ç—å_–∫–ª–∞–Ω")
    async def clan_withdraw(self, ctx, amount: int):
        user = ctx.author
        clan_name = await get_user_clan(user.id)
        
        if not clan_name:
            await ctx.send("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return
        
        async with bot.db.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            clan_owner = await conn.fetchval("SELECT owner_id FROM clans WHERE name = $1", clan_name)
            if clan_owner != user.id:
                await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞!")
                return
            
            clan_balance = await conn.fetchval("SELECT balance FROM clans WHERE name = $1", clan_name)
            if clan_balance < amount:
                await ctx.send("‚ùå –í –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                return
            
            # –°–Ω–∏–º–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            await conn.execute(
                "UPDATE clans SET balance = balance - $1 WHERE name = $2",
                amount, clan_name
            )
        
        await update_balance(user.id, amount)
        await ctx.send(f"‚úÖ {user.mention} —Å–Ω—è–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–∑ –∫–∞–∑–Ω—ã –∫–ª–∞–Ω–∞!")

# ==================== –ü–†–û–§–ò–õ–¨ ====================
class Profile(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def get_profile_description(self, user_id: int):
        async with bot.db.acquire() as conn:
            result = await conn.fetchrow("SELECT profile_description FROM users WHERE user_id = $1", user_id)
            return result["profile_description"] if result and result["profile_description"] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    async def update_profile_description(self, user_id: int, description: str):
        async with bot.db.acquire() as conn:
            await conn.execute("""
                INSERT INTO users (user_id, profile_description) VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET profile_description = $2
            """, user_id, description)

    async def get_user_clan(self, user_id: int):
        async with bot.db.acquire() as conn:
            return await conn.fetchval("SELECT clan_name FROM user_clans WHERE user_id = $1", user_id)

    @commands.command(name="–ø—Ä–æ—Ñ–∏–ª—å")
    async def profile(self, ctx, member: discord.Member = None):
        if not member:
            member = ctx.author
        
        balance = await get_balance(member.id)
        clan = await self.get_user_clan(member.id)
        description = await self.get_profile_description(member.id)
        user_data = await get_user_data(member.id)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        embed = discord.Embed(
            title=f"üìä –ü—Ä–æ—Ñ–∏–ª—å {member.display_name}",
            color=member.color
        )
        
        avatar_url = member.avatar.url if member.avatar else member.default_avatar.url
        embed.set_thumbnail(url=avatar_url)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        embed.add_field(name="üí∞ –ë–∞–ª–∞–Ω—Å", value=f"{balance} –∫—Ä–µ–¥–∏—Ç–æ–≤", inline=True)
        embed.add_field(name="üë• –ö–ª–∞–Ω", value=clan if clan else "–ù–µ—Ç –∫–ª–∞–Ω–∞", inline=True)
        
        # –ë–∏–∑–Ω–µ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user_data and user_data['business_license']:
            business_info = f"{user_data['business_license'].capitalize()} –±–∏–∑–Ω–µ—Å\n+{user_data['business_income']}/—á–∞—Å"
            embed.add_field(name="üíº –ë–∏–∑–Ω–µ—Å", value=business_info, inline=True)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç–µ—Ä—ã
        boosters = []
        if user_data and user_data['farm_booster_until'] and user_data['farm_booster_until'] > datetime.now():
            time_left = user_data['farm_booster_until'] - datetime.now()
            hours_left = int(time_left.total_seconds() // 3600)
            boosters.append(f"üåæ –§–∞—Ä–º ({hours_left}—á)")
        
        if user_data and user_data['roulette_booster_until'] and user_data['roulette_booster_until'] > datetime.now():
            time_left = user_data['roulette_booster_until'] - datetime.now()
            hours_left = int(time_left.total_seconds() // 3600)
            boosters.append(f"üé∞ –†—É–ª–µ—Ç–∫–∞ ({hours_left}—á)")
        
        if boosters:
            embed.add_field(name="üöÄ –ë—É—Å—Ç–µ—Ä—ã", value="\n".join(boosters), inline=True)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        embed.add_field(name="üìù –û–ø–∏—Å–∞–Ω–∏–µ", value=description, inline=False)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        join_date = member.joined_at.strftime("%d.%m.%Y") if member.joined_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        embed.add_field(name="üìÖ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å", value=join_date, inline=True)
        embed.add_field(name="üÜî ID", value=member.id, inline=True)
        
        embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–ª: {ctx.author.display_name}")
        
        await ctx.send(embed=embed)

    @commands.command(name="–æ–ø–∏—Å–∞–Ω–∏–µ_–ø—Ä–æ—Ñ–∏–ª—å")
    async def set_profile_description(self, ctx, *, description: str):
        if len(description) > 200:
            await ctx.send("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤!")
            return
        
        await self.update_profile_description(ctx.author.id, description)
        await ctx.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    @commands.command(name="—Å–±—Ä–æ—Å–∏—Ç—å_–æ–ø–∏—Å–∞–Ω–∏–µ")
    async def reset_profile_description(self, ctx):
        await self.update_profile_description(ctx.author.id, "")
        await ctx.send("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–±—Ä–æ—à–µ–Ω–æ!")

# ==================== –ú–û–î–ï–†–ê–¶–ò–Ø ====================
class Mod(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def is_admin(self, member):
        return any(role.name.lower() in [r.lower() for r in ADMIN_ROLES] for role in member.roles)

    async def create_mute_role(self, guild):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è –º—å—é—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        mute_role = discord.utils.get(guild.roles, name=MUTE_ROLE_NAME)
        if not mute_role:
            mute_role = await guild.create_role(
                name=MUTE_ROLE_NAME,
                reason="–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –º—å—é—Ç–∞"
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö
            for channel in guild.channels:
                try:
                    if isinstance(channel, discord.TextChannel):
                        await channel.set_permissions(mute_role, 
                            send_messages=False,
                            add_reactions=False,
                            create_public_threads=False,
                            create_private_threads=False,
                            send_messages_in_threads=False
                        )
                    elif isinstance(channel, discord.VoiceChannel):
                        await channel.set_permissions(mute_role,
                            speak=False,
                            connect=False,
                            stream=False
                        )
                except discord.Forbidden:
                    continue
        
        return mute_role

    @commands.command(name="–º—É—Ç")
    async def mute(self, ctx, member: discord.Member, time: int = 60, *, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if member == ctx.author:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        
        if self.is_admin(member):
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –º—É—Ç–∞
        mute_role = await self.create_mute_role(ctx.guild)
        
        # –ú—å—é—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await member.add_roles(mute_role, reason=f"–ú—É—Ç –æ—Ç {ctx.author.name}: {reason}")
        
        # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        embed = discord.Embed(
            title="üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—å—é—á–µ–Ω",
            color=0xff0000,
            timestamp=datetime.now()
        )
        embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=member.mention, inline=True)
        embed.add_field(name="‚è∞ –í—Ä–µ–º—è", value=f"{time} –º–∏–Ω—É—Ç", inline=True)
        embed.add_field(name="üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=ctx.author.mention, inline=True)
        embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
        
        await ctx.send(embed=embed)
        
        # –ê–≤—Ç–æ-—Ä–∞–∑–º—É—Ç —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if time > 0:
            await asyncio.sleep(time * 60)
            try:
                if mute_role in member.roles:
                    await member.remove_roles(mute_role)
                    await ctx.send(f"‚úÖ {member.mention} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º—å—é—á–µ–Ω!")
            except:
                pass

    @commands.command(name="—Ä–∞–∑–º—É—Ç")
    async def unmute(self, ctx, member: discord.Member):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        mute_role = discord.utils.get(ctx.guild.roles, name=MUTE_ROLE_NAME)
        if mute_role and mute_role in member.roles:
            await member.remove_roles(mute_role)
            
            embed = discord.Embed(
                title="üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—å—é—á–µ–Ω",
                color=0x00ff00,
                timestamp=datetime.now()
            )
            embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=member.mention, inline=True)
            embed.add_field(name="üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=ctx.author.mention, inline=True)
            
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–º—å—é—á–µ–Ω!")

    @commands.command(name="–æ—á–∏—Å—Ç–∏—Ç—å")
    async def clear(self, ctx, amount: int = 10):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if amount > 100:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–æ–ª—å—à–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑!")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        deleted = await ctx.channel.purge(limit=amount + 1)  # +1 –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        
        embed = discord.Embed(
            title="üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
            description=f"–£–¥–∞–ª–µ–Ω–æ {len(deleted) - 1} —Å–æ–æ–±—â–µ–Ω–∏–π",
            color=0xffff00
        )
        embed.add_field(name="üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=ctx.author.mention, inline=True)
        embed.add_field(name="üìä –°–æ–æ–±—â–µ–Ω–∏–π", value=str(len(deleted) - 1), inline=True)
        
        message = await ctx.send(embed=embed)
        await asyncio.sleep(5)
        await message.delete()

    @commands.command(name="–∫–∏–∫")
    async def kick(self, ctx, member: discord.Member, *, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if member == ctx.author:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        
        if self.is_admin(member):
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        try:
            await member.kick(reason=f"–ö–∏–∫ –æ—Ç {ctx.author.name}: {reason}")
            
            embed = discord.Embed(
                title="üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç",
                color=0xffa500,
                timestamp=datetime.now()
            )
            embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=member.name, inline=True)
            embed.add_field(name="üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=ctx.author.mention, inline=True)
            embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
            
            await ctx.send(embed=embed)
        except discord.Forbidden:
            await ctx.send("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∫–∏–∫–∞!")

    @commands.command(name="–±–∞–Ω")
    async def ban(self, ctx, member: discord.Member, *, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
        if not self.is_admin(ctx.author):
            await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if member == ctx.author:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        
        if self.is_admin(member):
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        try:
            await member.ban(reason=f"–ë–∞–Ω –æ—Ç {ctx.author.name}: {reason}")
            
            embed = discord.Embed(
                title="üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω",
                color=0xff0000,
                timestamp=datetime.now()
            )
            embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=member.name, inline=True)
            embed.add_field(name="üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=ctx.author.mention, inline=True)
            embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
            
            await ctx.send(embed=embed)
        except discord.Forbidden:
            await ctx.send("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞!")

# ==================== –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø ====================
class Fun(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="—Ä–∞–Ω–¥–æ–º")
    async def random_num(self, ctx, min_num: int = 1, max_num: int = 100):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"""
        if min_num > max_num:
            min_num, max_num = max_num, min_num
        
        result = random.randint(min_num, max_num)
        await ctx.send(f"üé≤ {ctx.author.mention}, —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: **{result}** (–æ—Ç {min_num} –¥–æ {max_num})")

    @commands.command(name="–æ—Ä—ë–ª")
    async def coin_flip(self, ctx):
        """–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–æ–Ω–µ—Ç–∫—É"""
        result = random.choice(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ ü™ô"])
        await ctx.send(f"üéØ {ctx.author.mention}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**!")

    @commands.command(name="–≤—ã–±–æ—Ä")
    async def choose(self, ctx, *, options: str):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"""
        options_list = [opt.strip() for opt in options.split(",") if opt.strip()]
        
        if len(options_list) < 2:
            await ctx.send("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!")
            return
        
        chosen = random.choice(options_list)
        await ctx.send(f"ü§î {ctx.author.mention}, —è –≤—ã–±–∏—Ä–∞—é: **{chosen}**!")

    @commands.command(name="—à–∞—Ä")
    async def magic_ball(self, ctx, *, question: str):
        """–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
        answers = [
            "–ë–µ—Å—Å–ø–æ—Ä–Ω–æ! ‚úÖ", "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ! ‚úÖ", "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π! ‚úÖ", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞! ‚úÖ",
            "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º! ‚úÖ", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª! ü§î", "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ! üëç",
            "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã! üëç", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª! üîÆ", "–î–∞! ‚úÖ",
            "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÑ", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ! ‚è∞", "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å! ü§´",
            "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å! üîÆ", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å! üßò",
            "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π! ‚ùå", "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª! ‚ùå", "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª! ‚ùå",
            "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ! üëé", "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ! ü§®"
        ]
        
        answer = random.choice(answers)
        embed = discord.Embed(
            title="üé± –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä",
            color=0x7289da
        )
        embed.add_field(name="‚ùì –í–æ–ø—Ä–æ—Å", value=question, inline=False)
        embed.add_field(name="üìú –û—Ç–≤–µ—Ç", value=answer, inline=False)
        embed.set_footer(text=f–ó–∞–ø—Ä–æ—Å–∏–ª: {ctx.author.display_name}")
        
        await ctx.send(embed=embed)

    @commands.command(name="—Å–ª–æ—Ç—ã")
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def slots(self, ctx, bet: int = 10):
        """–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã"""
        if bet <= 0:
            await ctx.send("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        balance = await get_balance(ctx.author.id)
        if balance < bet:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            return

        # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤
        symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé", "7Ô∏è‚É£"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = [random.choice(symbols) for _ in range(3)]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if result[0] == result[1] == result[2]:
            if result[0] == "üíé":
                multiplier = 10  # –î–∂–µ–∫–ø–æ—Ç
            elif result[0] == "7Ô∏è‚É£":
                multiplier = 5
            else:
                multiplier = 3
        elif result[0] == result[1] or result[1] == result[2]:
            multiplier = 1.5
        else:
            multiplier = 0
        
        win_amount = int(bet * multiplier)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if win_amount > 0:
            await update_balance(ctx.author.id, win_amount)
        else:
            await update_balance(ctx.author.id, -bet)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π embed
        embed = discord.Embed(
            title="üé∞ –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã",
            color=0xffd700 if win_amount > 0 else 0xff0000
        )
        
        embed.add_field(
            name="–†–µ–∑—É–ª—å—Ç–∞—Ç",
            value=f"**| {result[0]} | {result[1]} | {result[2]} |**",
            inline=False
        )
        
        if win_amount > 0:
            if multiplier == 10:
                embed.add_field(name="üéâ –î–ñ–ï–ö–ü–û–¢!", value=f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤!", inline=False)
            else:
                embed.add_field(name="‚úÖ –í—ã–∏–≥—Ä—ã—à", value=f"+{win_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ (x{multiplier})", inline=False)
        else:
            embed.add_field(name="‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à", value=f"-{bet} –∫—Ä–µ–¥–∏—Ç–æ–≤", inline=False)
        
        embed.add_field(name="üí∞ –ë–∞–ª–∞–Ω—Å", value=f"{await get_balance(ctx.author.id)} –∫—Ä–µ–¥–∏—Ç–æ–≤", inline=True)
        embed.set_footer(text=f"–ò–≥—Ä–æ–∫: {ctx.author.display_name}")
        
        await ctx.send(embed=embed)

    @commands.command(name="–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞")
    @commands.cooldown(1, 30, commands.BucketType.user)
    async def quiz(self, ctx):
        """–°–ª—É—á–∞–π–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"""
        questions = [
            {
                "question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
                "options": ["8", "9", "10", "7"],
                "answer": 0
            },
            {
                "question": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?",
                "options": ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–Ø–Ω—Ü–∑—ã", "–ú–∏—Å—Å–∏—Å–∏–ø–∏"],
                "answer": 0
            },
            {
                "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?",
                "options": ["1939", "1941", "1937", "1945"],
                "answer": 0
            },
            {
                "question": "–°—Ç–æ–ª–∏—Ü–∞ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏?",
                "options": ["–ö–∞–Ω–±–µ—Ä—Ä–∞", "–°–∏–¥–Ω–µ–π", "–ú–µ–ª—å–±—É—Ä–Ω", "–ü–µ—Ä—Ç"],
                "answer": 0
            }
        ]
        
        q = random.choice(questions)
        
        embed = discord.Embed(
            title="üìö –í–∏–∫—Ç–æ—Ä–∏–Ω–∞",
            description=q["question"],
            color=0x0099ff
        )
        
        options_text = ""
        for i, option in enumerate(q["options"]):
            options_text += f"{i+1}. {option}\n"
        
        embed.add_field(name="–í–∞—Ä–∏–∞–Ω—Ç—ã:", value=options_text, inline=False)
        embed.set_footer(text="–£ –≤–∞—Å 15 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–æ–π!")
        
        message = await ctx.send(embed=embed)
        
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and m.content.isdigit()
        
        try:
            response = await self.bot.wait_for('message', timeout=15.0, check=check)
            user_answer = int(response.content) - 1
            
            if user_answer == q["answer"]:
                reward = random.randint(50, 150)
                await update_balance(ctx.author.id, reward)
                await ctx.send(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {ctx.author.mention} –ø–æ–ª—É—á–∞–µ—Ç {reward} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            else:
                correct_answer = q["options"][q["answer"]]
                await ctx.send(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
                
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")

    @commands.command(name="–∫—Ç–æ")
    async def who_is(self, ctx, *, question: str):
        """–°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        members = [member for member in ctx.guild.members if not member.bot]
        
        if not members:
            await ctx.send("‚ùå –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return
        
        chosen = random.choice(members)
        
        embed = discord.Embed(
            title="üé≠ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä",
            color=chosen.color
        )
        embed.add_field(name="‚ùì –í–æ–ø—Ä–æ—Å", value=question, inline=False)
        embed.add_field(name="üë§ –í—ã–±—Ä–∞–Ω", value=chosen.mention, inline=False)
        embed.set_thumbnail(url=chosen.avatar.url if chosen.avatar else chosen.default_avatar.url)
        
        await ctx.send(embed=embed)


# ==================== –°–û–ë–´–¢–ò–Ø ====================
class Events(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î –≥–æ—Ç–æ–≤—ã!")

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            seconds = int(error.retry_after)
            minutes = seconds // 60
            seconds = seconds % 60
            await ctx.send(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes}–º {seconds}—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.")
        else:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {error}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

from flask import Flask
from threading import Thread
from datetime import datetime
import requests

app = Flask('')

@app.route('/')
def home():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>ü§ñ Discord Bot</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                background: rgba(255,255,255,0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255,255,255,0.2);
            }
            .status {
                padding: 15px;
                border-radius: 8px;
                margin: 20px 0;
                text-align: center;
                font-weight: bold;
            }
            .online { 
                background: rgba(76, 175, 80, 0.3); 
                border: 2px solid #4CAF50;
            }
            .features { 
                display: grid; 
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
                gap: 20px; 
                margin: 30px 0; 
            }
            .feature { 
                background: rgba(255,255,255,0.15); 
                padding: 20px; 
                border-radius: 10px;
                text-align: center;
                transition: transform 0.3s ease;
            }
            .feature:hover {
                transform: translateY(-5px);
                background: rgba(255,255,255,0.2);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .footer {
                text-align: center;
                margin-top: 30px;
                opacity: 0.8;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéÆ Discord –ë–æ—Ç –ê–∫—Ç–∏–≤–µ–Ω</h1>
            <div class="status online">‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ</div>
            
            <div class="features">
                <div class="feature">
                    <h3>üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞</h3>
                    <p>–°–∏—Å—Ç–µ–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤, –º–∞–≥–∞–∑–∏–Ω, –±–∏–∑–Ω–µ—Å, —Ä—É–ª–µ—Ç–∫–∞</p>
                </div>
                <div class="feature">
                    <h3>üë• –ö–ª–∞–Ω—ã</h3>
                    <p>–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–æ–≤, –æ–±—â–∞—è –∫–∞–∑–Ω–∞, —É–ª—É—á—à–µ–Ω–∏—è</p>
                </div>
                <div class="feature">
                    <h3>üéØ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</h3>
                    <p>–ò–≥—Ä—ã, –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, —Å–ª–æ—Ç—ã, –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä</p>
                </div>
                <div class="feature">
                    <h3>üõ° –ú–æ–¥–µ—Ä–∞—Ü–∏—è</h3>
                    <p>–ú—É—Ç, –±–∞–Ω, –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞, –≤–∞—Ä–Ω—ã</p>
                </div>
            </div>
            
            <div style="text-align: center;">
                <p><strong>üìù –ö–æ–º–∞–Ω–¥—ã:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>!–ø–æ–º–æ—â—å</code> –≤ Discord</p>
                <p><strong>üü¢ –°—Ç–∞—Ç—É—Å:</strong> <span style="color: #4CAF50; font-weight: bold;">‚óè –û–Ω–ª–∞–π–Ω</span></p>
                <p><strong>üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> <span id="uptime">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
            </div>
            
            <div class="footer">
                <p>ü§ñ –ë–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞</p>
            </div>
        </div>

        <script>
            // –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
            function updateUptime() {
                fetch('/health')
                    .then(response => response.json())
                    .then(data => {
                        const timestamp = new Date(data.timestamp);
                        const now = new Date();
                        const diff = now - timestamp;
                        
                        const hours = Math.floor(diff / (1000 * 60 * 60));
                        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                        
                        document.getElementById('uptime').textContent = 
                            `${hours}—á ${minutes}–º`;
                    })
                    .catch(() => {
                        document.getElementById('uptime').textContent = '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ';
                    });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            updateUptime();
            setInterval(updateUptime, 60000);
        </script>
    </body>
    </html>
    """

@app.route('/health')
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    return {
        "status": "healthy", 
        "timestamp": datetime.now().isoformat(),
        "service": "discord_bot",
        "version": "1.0.0"
    }

@app.route('/status')
def status():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
    return {
        "status": "online",
        "timestamp": datetime.now().isoformat(),
        "endpoints": {
            "health": "/health",
            "home": "/",
            "status": "/status"
        }
    }

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        print("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
        app.run(host='0.0.0.0', port=8080, debug=False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flask: {e}")

def keep_alive():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        flask_thread = Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()
        print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        print("üìä –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ: http://localhost:8080")
        print("üîß Health check: http://localhost:8080/health")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
    try:
        response = requests.get('http://localhost:8080/health', timeout=5)
        if response.status_code == 200:
            return True
        return False
    except:
        return False

if __name__ == "__main__":
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é...")
    keep_alive()
